#!/usr/bin/env python

###
### This file is generated automatically by SALOME v9.10.0 with dump python functionality
###

import sys
import salome

salome.salome_init()
import salome_notebook
notebook = salome_notebook.NoteBook()
sys.path.insert(0, r'C:/Users/Lenovo/00_MODELOS/00_TREINO_SOFTWARE/00_CURSO_WIKKI/01_CURSO_SALOME/SALOME_SCRIPTS')

### GEOM component
###

import GEOM
from salome.geom import geomBuilder
import math
import SALOMEDS


geompy = geomBuilder.New()

O = geompy.MakeVertex(0, 0, 0)
OX = geompy.MakeVectorDXDYDZ(1, 0, 0)
OY = geompy.MakeVectorDXDYDZ(0, 1, 0)
OZ = geompy.MakeVectorDXDYDZ(0, 0, 1)
Filete3 = geompy.ImportSTEP("C:/00_MODELOS/00_TREINO_SOFTWARE/00_CURSO_WIKKI/01_CURSO_SALOME/07_PIG/PIG.STEP", False, True)
Vertex_1 = geompy.MakeVertex(0.008, 0, 0)
Vertex_2 = geompy.MakeVertex(0.008, 0.032, 0)
Vertex_3 = geompy.MakeVertex(-0.1096, 0.032, 0)
Vertex_4 = geompy.MakeVertex(-0.1096, 0, 0)
Line_1 = geompy.MakeLineTwoPnt(Vertex_4, Vertex_1)
Line_2 = geompy.MakeLineTwoPnt(Vertex_1, Vertex_2)
Line_3 = geompy.MakeLineTwoPnt(Vertex_2, Vertex_3)
Line_1_vertex_2 = geompy.GetSubShape(Line_1, [2])
Line_4 = geompy.MakeLineTwoPnt(Vertex_3, Line_1_vertex_2)
Face_1 = geompy.MakeFaceWires([Line_1, Line_2, Line_3, Line_4], 1)
Revolution_1 = geompy.MakeRevolution(Face_1, OX, 360*math.pi/180.0)
Cut_1 = geompy.MakeCutList(Revolution_1, [Filete3], True)
Divided_Cylinder_1 = geompy.MakeDividedCylinder(0.032, 0.15, GEOM.SQUARE)
Rotation_1 = geompy.MakeRotation(Divided_Cylinder_1, OY, 90*math.pi/180.0)
CILINDRO_2 = geompy.MakeTranslation(Rotation_1, 0.008, 0, 0)
CILINDRO_1 = geompy.MakeTranslation(CILINDRO_2, -0.2676, 0, 0)
CORPO_CENTRAL = geompy.MakePartition([Cut_1], [CILINDRO_2, CILINDRO_1], [], [], geompy.ShapeType["SOLID"], 0, [], 0)
VICOUS_LAYER_1 = geompy.CreateGroup(CILINDRO_1, geompy.ShapeType["FACE"])
geompy.UnionIDs(VICOUS_LAYER_1, [38, 14, 62, 86])
EDGES_LONG_1 = geompy.CreateGroup(CILINDRO_1, geompy.ShapeType["EDGE"])
geompy.UnionIDs(EDGES_LONG_1, [71, 64, 6, 40, 23, 16, 47, 9])
OUTLET = geompy.CreateGroup(CILINDRO_1, geompy.ShapeType["FACE"])
geompy.UnionIDs(OUTLET, [56, 32, 100, 80, 94])
[VICOUS_LAYER_1, EDGES_LONG_1, OUTLET] = geompy.GetExistingSubObjects(CILINDRO_1, False)
VICOUS_LAYER_2 = geompy.CreateGroup(CILINDRO_2, geompy.ShapeType["FACE"])
geompy.UnionIDs(VICOUS_LAYER_2, [38, 62, 86, 14])
IN_LET = geompy.CreateGroup(CILINDRO_2, geompy.ShapeType["FACE"])
geompy.UnionIDs(IN_LET, [58, 34, 82, 96, 102])
EDGES_2 = geompy.CreateGroup(CILINDRO_2, geompy.ShapeType["EDGE"])
geompy.UnionIDs(EDGES_2, [40, 9, 47, 23, 64, 71, 16, 6])
[VICOUS_LAYER_2, IN_LET, EDGES_2] = geompy.GetExistingSubObjects(CILINDRO_2, False)
[VICOUS_LAYER_2, IN_LET, EDGES_2] = geompy.GetExistingSubObjects(CILINDRO_2, False)
FACES_CONTATO = geompy.CreateGroup(CORPO_CENTRAL, geompy.ShapeType["FACE"])
geompy.UnionIDs(FACES_CONTATO, [20, 357, 31, 129, 126, 27, 61, 175, 64, 56, 374, 377, 3, 44, 350, 13, 106, 51, 81, 109])
geompy.DifferenceIDs(FACES_CONTATO, [20, 357, 31, 129, 126, 27, 61, 175, 64, 56, 374, 377, 3, 44, 350, 13, 106, 51, 81, 109])
geompy.UnionIDs(FACES_CONTATO, [20, 64, 61, 56, 3, 51, 44, 13, 31, 27])
geompy.addToStudy( O, 'O' )
geompy.addToStudy( OX, 'OX' )
geompy.addToStudy( OY, 'OY' )
geompy.addToStudy( OZ, 'OZ' )
geompy.addToStudy( Filete3, 'Filete3' )
geompy.addToStudy( Vertex_1, 'Vertex_1' )
geompy.addToStudy( Vertex_3, 'Vertex_3' )
geompy.addToStudy( Vertex_2, 'Vertex_2' )
geompy.addToStudy( Vertex_4, 'Vertex_4' )
geompy.addToStudy( Line_1, 'Line_1' )
geompy.addToStudy( Line_2, 'Line_2' )
geompy.addToStudy( Line_3, 'Line_3' )
geompy.addToStudyInFather( Line_1, Line_1_vertex_2, 'Line_1:vertex_2' )
geompy.addToStudy( Line_4, 'Line_4' )
geompy.addToStudy( Face_1, 'Face_1' )
geompy.addToStudy( Revolution_1, 'Revolution_1' )
geompy.addToStudy( Cut_1, 'Cut_1' )
geompy.addToStudy( Divided_Cylinder_1, 'Divided Cylinder_1' )
geompy.addToStudy( Rotation_1, 'Rotation_1' )
geompy.addToStudy( CILINDRO_2, 'CILINDRO 2' )
geompy.addToStudy( CILINDRO_1, 'CILINDRO 1' )
geompy.addToStudy( CORPO_CENTRAL, 'CORPO_CENTRAL' )
geompy.addToStudyInFather( CILINDRO_1, VICOUS_LAYER_1, 'VICOUS_LAYER_1' )
geompy.addToStudyInFather( CILINDRO_1, EDGES_LONG_1, 'EDGES_LONG_1' )
geompy.addToStudyInFather( CILINDRO_1, OUTLET, 'OUTLET' )
geompy.addToStudyInFather( CILINDRO_2, VICOUS_LAYER_2, 'VICOUS_LAYER_2' )
geompy.addToStudyInFather( CILINDRO_2, IN_LET, 'IN_LET' )
geompy.addToStudyInFather( CILINDRO_2, EDGES_2, 'EDGES_2' )
geompy.addToStudyInFather( CORPO_CENTRAL, FACES_CONTATO, 'FACES_CONTATO' )

###
### SMESH component
###

import  SMESH, SALOMEDS
from salome.smesh import smeshBuilder

smesh = smeshBuilder.New()
#smesh.SetEnablePublish( False ) # Set to False to avoid publish in study if not needed or in some particular situations:
                                 # multiples meshes built in parallel, complex and numerous mesh edition (performance)

CILINDRO_1_1 = smesh.Mesh(CILINDRO_1,'CILINDRO_1')
Regular_1D = CILINDRO_1_1.Segment()
CILINDRO_1_2 = Regular_1D.NumberOfSegments(15)
Quadrangle_2D = CILINDRO_1_1.Quadrangle(algo=smeshBuilder.QUADRANGLE)
Hexa_3D = CILINDRO_1_1.Hexahedron(algo=smeshBuilder.Hexa)
VICOUS_LAYER_1_1 = CILINDRO_1_1.GroupOnGeom(VICOUS_LAYER_1,'VICOUS_LAYER_1',SMESH.FACE)
EDGES_LONG_1_1 = CILINDRO_1_1.GroupOnGeom(EDGES_LONG_1,'EDGES_LONG_1',SMESH.EDGE)
OUTLET_1 = CILINDRO_1_1.GroupOnGeom(OUTLET,'OUTLET',SMESH.FACE)
Viscous_Layers_1 = Hexa_3D.ViscousLayers(0.0012,10,1.2,[ 38, 14, 62, 86 ],0,smeshBuilder.SURF_OFFSET_SMOOTH)
Regular_1D_1 = CILINDRO_1_1.Segment(geom=EDGES_LONG_1)
Number_of_Segments_1 = Regular_1D_1.NumberOfSegments(80,None,[])
Number_of_Segments_1.SetConversionMode( 1 )
Number_of_Segments_1.SetTableFunction( [ 0, 1, 0.5, 0.4, 1, 0.1 ] )
isDone = CILINDRO_1_1.Compute()
[ VICOUS_LAYER_1_1, EDGES_LONG_1_1, OUTLET_1 ] = CILINDRO_1_1.GetGroups()
Number_of_Segments_1.SetNumberOfSegments( 80 )
Number_of_Segments_1.SetConversionMode( 1 )
Number_of_Segments_1.SetReversedEdges( [] )
Number_of_Segments_1.SetTableFunction( [ 0, 0.1, 0.5, 0.4, 1, 1 ] )
CILINDRO_1_1.Clear()
isDone = CILINDRO_1_1.Compute()
[ VICOUS_LAYER_1_1, EDGES_LONG_1_1, OUTLET_1 ] = CILINDRO_1_1.GetGroups()
Number_of_Segments_2 = smesh.CreateHypothesis('NumberOfSegments')
Number_of_Segments_2.SetNumberOfSegments( 15 )
Viscous_Layers_2 = smesh.CreateHypothesis('ViscousLayers')
Viscous_Layers_2.SetTotalThickness( 0.0012 )
Viscous_Layers_2.SetNumberLayers( 10 )
Viscous_Layers_2.SetStretchFactor( 1.2 )
Viscous_Layers_2.SetMethod( smeshBuilder.SURF_OFFSET_SMOOTH )
Viscous_Layers_2.SetFaces( [ 38, 62, 86, 14 ], 0 )
smeshObj_1 = smesh.Mesh(CILINDRO_2)
status = smeshObj_1.AddHypothesis(Number_of_Segments_2)
Regular_1D_2 = smesh.CreateHypothesis( "Regular_1D" )
status = smeshObj_1.AddHypothesis(Regular_1D)
Quadrangle_2D_1 = smesh.CreateHypothesis( "Quadrangle_2D" )
status = smeshObj_1.AddHypothesis(Quadrangle_2D)
status = smeshObj_1.AddHypothesis(Viscous_Layers_2)
Hexa_3D_1 = smesh.CreateHypothesis( "Hexa_3D" )
status = smeshObj_1.AddHypothesis(Hexa_3D)
smeshObj_2 = smeshObj_1.GroupOnGeom(VICOUS_LAYER_2,'VICOUS_LAYER_2',SMESH.FACE)
smeshObj_3 = smeshObj_1.GroupOnGeom(IN_LET,'IN_LET',SMESH.FACE)
smeshObj_4 = smeshObj_1.GroupOnGeom(EDGES_2,'EDGES_2',SMESH.EDGE)
smeshObj_5 = smesh.CreateHypothesis('NumberOfSegments')
Number_of_Segments_3 = smesh.CreateHypothesis('NumberOfSegments')
Number_of_Segments_3.SetNumberOfSegments( 15 )
Number_of_Segments_3.SetConversionMode( 1 )
Number_of_Segments_3.SetReversedEdges( [] )
Number_of_Segments_3.SetObjectEntry( "0:1:1:19" )
Number_of_Segments_3.SetTableFunction( [ 0, 1, 0.5, 0.4, 1, 0.1 ] )
Propagation_of_1D_Hyp = smesh.CreateHypothesis('Propagation')
smeshObj_6 = smeshObj_1.GetSubMesh( EDGES_2, 'Sub-mesh_1' )
Regular_1D_3 = smesh.CreateHypothesis( "Regular_1D" )
status = smeshObj_1.AddHypothesis(Regular_1D,EDGES_2)
status = smeshObj_1.AddHypothesis(Number_of_Segments_3,EDGES_2)
isDone = smeshObj_1.Compute()
[ smeshObj_2, smeshObj_3, smeshObj_4 ] = smeshObj_1.GetGroups()
Number_of_Segments_3.SetNumberOfSegments( 80 )
Number_of_Segments_3.SetConversionMode( 1 )
Number_of_Segments_3.SetReversedEdges( [] )
Number_of_Segments_3.SetObjectEntry( "0:1:1:19" )
Number_of_Segments_3.SetTableFunction( [ 0, 1, 0.5, 0.4, 1, 0.1 ] )
isDone = smeshObj_1.Compute()
[ smeshObj_2, smeshObj_3, smeshObj_4 ] = smeshObj_1.GetGroups()
smeshObj_7 = smesh.CreateHypothesis('NumberOfSegments')
CILINDRO_2_1 = smesh.CreateHypothesis('NumberOfSegments')
CILINDRO_2_1.SetNumberOfSegments( 15 )
status = smeshObj_1.RemoveHypothesis(Number_of_Segments_2)
status = smeshObj_1.AddHypothesis(CILINDRO_2_1)
smeshObj_1.Clear()
isDone = smeshObj_1.Compute()
[ smeshObj_2, smeshObj_3, smeshObj_4 ] = smeshObj_1.GetGroups()
smeshObj_1.GetMesh().RemoveSubMesh( smeshObj_6 )
smeshObj_1.Clear()
isDone = smeshObj_1.Compute()
[ smeshObj_2, smeshObj_3, smeshObj_4 ] = smeshObj_1.GetGroups()
CILINDRO_2_2 = smesh.Mesh(CILINDRO_2,'CILINDRO_2')
Regular_1D_4 = CILINDRO_2_2.Segment()
CILINDRO_2_3 = Regular_1D_4.NumberOfSegments(15)
Quadrangle_2D_2 = CILINDRO_2_2.Quadrangle(algo=smeshBuilder.QUADRANGLE)
Hexa_3D_2 = CILINDRO_2_2.Hexahedron(algo=smeshBuilder.Hexa)
Viscous_Layers_3 = Hexa_3D_2.ViscousLayers(0.0012,10,1.2,[ 38, 62, 86, 14 ],0,smeshBuilder.SURF_OFFSET_SMOOTH)
VICOUS_LAYER_2_1 = CILINDRO_2_2.GroupOnGeom(VICOUS_LAYER_2,'VICOUS_LAYER_2',SMESH.FACE)
IN_LET_1 = CILINDRO_2_2.GroupOnGeom(IN_LET,'IN_LET',SMESH.FACE)
EDGES_2_1 = CILINDRO_2_2.GroupOnGeom(EDGES_2,'EDGES_2',SMESH.EDGE)
isDone = CILINDRO_2_2.Compute()
[ VICOUS_LAYER_2_1, IN_LET_1, EDGES_2_1 ] = CILINDRO_2_2.GetGroups()
Regular_1D_5 = CILINDRO_2_2.Segment(geom=EDGES_2)
Number_of_Segments_4 = Regular_1D_5.NumberOfSegments(80,None,[])
Number_of_Segments_4.SetConversionMode( 1 )
Number_of_Segments_4.SetTableFunction( [ 0, 1, 0.5, 0.4, 1, 0.1 ] )
CILINDRO_2_2.Clear()
isDone = CILINDRO_2_2.Compute()
[ VICOUS_LAYER_2_1, IN_LET_1, EDGES_2_1 ] = CILINDRO_2_2.GetGroups()
#hyp_36.SetLength( 0.0148397 ) ### not created Object
NETGEN_3D_Parameters_1 = smesh.CreateHypothesisByAverageLength( 'NETGEN_Parameters', 'NETGENEngine', 0.0148397, 0 )
NETGEN_3D_Parameters_1.SetMaxSize( 0.0015 )
NETGEN_3D_Parameters_1.SetMinSize( 0.0005 )
NETGEN_3D_Parameters_1.SetSecondOrder( 0 )
NETGEN_3D_Parameters_1.SetOptimize( 1 )
NETGEN_3D_Parameters_1.SetFineness( 2 )
NETGEN_3D_Parameters_1.SetChordalError( 0.00741987 )
NETGEN_3D_Parameters_1.SetChordalErrorEnabled( 1 )
NETGEN_3D_Parameters_1.SetUseSurfaceCurvature( 1 )
NETGEN_3D_Parameters_1.SetFuseEdges( 1 )
NETGEN_3D_Parameters_1.SetCheckChartBoundary( 0 )
NETGEN_3D_Parameters_1.SetQuadAllowed( 0 )
NETGEN_3D_Parameters_1.SetCheckChartBoundary( 104 )
CORPO_CENTRAL_1 = smesh.Mesh(CORPO_CENTRAL,'CORPO_CENTRAL')
status = CORPO_CENTRAL_1.AddHypothesis( CORPO_CENTRAL, NETGEN_3D_Parameters_1 )
NETGEN_1D_2D_3D = CORPO_CENTRAL_1.Tetrahedron(algo=smeshBuilder.NETGEN_1D2D3D)
Regular_1D_6 = CORPO_CENTRAL_1.Segment(geom=FACES_CONTATO)
Number_of_Segments_5 = Regular_1D_6.NumberOfSegments(15)
Quadrangle_2D_3 = CORPO_CENTRAL_1.Quadrangle(algo=smeshBuilder.QUADRANGLE,geom=FACES_CONTATO)
Viscous_Layers_4 = NETGEN_1D_2D_3D.ViscousLayers(0.0012,10,1.2,[ 20, 64, 61, 56, 3, 51, 44, 13, 31, 27 ],0,smeshBuilder.SURF_OFFSET_SMOOTH)
isDone = CORPO_CENTRAL_1.Compute()
Compound_Mesh_1 = smesh.Concatenate( [ CILINDRO_1_1.GetMesh(), CILINDRO_2_2.GetMesh(), CORPO_CENTRAL_1.GetMesh() ], 1, 1, 1e-05, True )
[ GrCILINDRO_1_Nodes, GrCILINDRO_1_Edges, GrCILINDRO_1_Faces, GrCILINDRO_1_Volumes, VICOUS_LAYER_1_2, EDGES_LONG_1_2, OUTLET_2, GrCILINDRO_2_Nodes, GrCILINDRO_2_Edges, GrCILINDRO_2_Faces, GrCILINDRO_2_Volumes, VICOUS_LAYER_2_2, IN_LET_2, EDGES_2_2, GrCORPO_CENTRAL_Nodes, GrCORPO_CENTRAL_Edges, GrCORPO_CENTRAL_Faces, GrCORPO_CENTRAL_Volumes ] = Compound_Mesh_1.GetGroups()
LINHAS = Regular_1D_1.GetSubMesh()
Sub_mesh_1 = Regular_1D_5.GetSubMesh()
Sub_mesh_2 = Regular_1D_6.GetSubMesh()

## some objects were removed
aStudyBuilder = salome.myStudy.NewBuilder()
SO = salome.myStudy.FindObjectIOR(salome.myStudy.ConvertObjectToIOR(smeshObj_4))
if SO: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = salome.myStudy.FindObjectIOR(salome.myStudy.ConvertObjectToIOR(smeshObj_5))
if SO: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = salome.myStudy.FindObjectIOR(salome.myStudy.ConvertObjectToIOR(smeshObj_7))
if SO: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = salome.myStudy.FindObjectIOR(salome.myStudy.ConvertObjectToIOR(smeshObj_6))
if SO: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = salome.myStudy.FindObjectIOR(salome.myStudy.ConvertObjectToIOR(smeshObj_1.GetMesh()))
if SO: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = salome.myStudy.FindObjectIOR(salome.myStudy.ConvertObjectToIOR(smeshObj_3))
if SO: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = salome.myStudy.FindObjectIOR(salome.myStudy.ConvertObjectToIOR(smeshObj_2))
if SO: aStudyBuilder.RemoveObjectWithChildren(SO)

## Set names of Mesh objects
smesh.SetName(GrCORPO_CENTRAL_Volumes, 'GrCORPO_CENTRAL_Volumes')
smesh.SetName(GrCILINDRO_2_Volumes, 'GrCILINDRO_2_Volumes')
smesh.SetName(GrCILINDRO_1_Volumes, 'GrCILINDRO_1_Volumes')
smesh.SetName(Regular_1D.GetAlgorithm(), 'Regular_1D')
smesh.SetName(Hexa_3D.GetAlgorithm(), 'Hexa_3D')
smesh.SetName(Quadrangle_2D.GetAlgorithm(), 'Quadrangle_2D')
smesh.SetName(Viscous_Layers_1, 'Viscous Layers_1')
smesh.SetName(NETGEN_1D_2D_3D.GetAlgorithm(), 'NETGEN 1D-2D-3D')
smesh.SetName(Number_of_Segments_1, 'Number of Segments_1')
smesh.SetName(CILINDRO_1_2, 'CILINDRO 1')
smesh.SetName(Number_of_Segments_3, 'Number of Segments_3')
smesh.SetName(Number_of_Segments_2, 'Number of Segments_2')
smesh.SetName(VICOUS_LAYER_1_1, 'VICOUS_LAYER_1')
smesh.SetName(Viscous_Layers_2, 'Viscous Layers_2')
smesh.SetName(OUTLET_1, 'OUTLET')
smesh.SetName(Propagation_of_1D_Hyp, 'Propagation of 1D Hyp. on Opposite Edges_1')
smesh.SetName(CILINDRO_1_1.GetMesh(), 'CILINDRO_1')
smesh.SetName(CILINDRO_2_2.GetMesh(), 'CILINDRO_2')
smesh.SetName(GrCORPO_CENTRAL_Edges, 'GrCORPO_CENTRAL_Edges')
smesh.SetName(EDGES_2_2, 'EDGES_2')
smesh.SetName(Compound_Mesh_1.GetMesh(), 'Compound_Mesh_1')
smesh.SetName(CORPO_CENTRAL_1.GetMesh(), 'CORPO_CENTRAL')
smesh.SetName(GrCILINDRO_1_Edges, 'GrCILINDRO_1_Edges')
smesh.SetName(GrCILINDRO_2_Edges, 'GrCILINDRO_2_Edges')
smesh.SetName(EDGES_LONG_1_2, 'EDGES_LONG_1')
smesh.SetName(GrCILINDRO_2_Nodes, 'GrCILINDRO_2_Nodes')
smesh.SetName(GrCORPO_CENTRAL_Nodes, 'GrCORPO_CENTRAL_Nodes')
smesh.SetName(GrCILINDRO_1_Nodes, 'GrCILINDRO_1_Nodes')
smesh.SetName(EDGES_2_1, 'EDGES_2')
smesh.SetName(LINHAS, 'LINHAS')
smesh.SetName(Sub_mesh_2, 'Sub-mesh_2')
smesh.SetName(GrCILINDRO_2_Faces, 'GrCILINDRO_2_Faces')
smesh.SetName(Number_of_Segments_4, 'Number of Segments_4')
smesh.SetName(VICOUS_LAYER_2_2, 'VICOUS_LAYER_2')
smesh.SetName(Viscous_Layers_3, 'Viscous Layers_3')
smesh.SetName(IN_LET_2, 'IN_LET')
smesh.SetName(CILINDRO_2_3, 'CILINDRO_2')
smesh.SetName(GrCORPO_CENTRAL_Faces, 'GrCORPO_CENTRAL_Faces')
smesh.SetName(CILINDRO_2_1, 'CILINDRO_2')
smesh.SetName(Sub_mesh_1, 'Sub-mesh_1')
smesh.SetName(GrCILINDRO_1_Faces, 'GrCILINDRO_1_Faces')
smesh.SetName(Viscous_Layers_4, 'Viscous Layers_4')
smesh.SetName(VICOUS_LAYER_1_2, 'VICOUS_LAYER_1')
smesh.SetName(Number_of_Segments_5, 'Number of Segments_5')
smesh.SetName(OUTLET_2, 'OUTLET')
smesh.SetName(NETGEN_3D_Parameters_1, 'NETGEN 3D Parameters_1')
smesh.SetName(IN_LET_1, 'IN_LET')
smesh.SetName(VICOUS_LAYER_2_1, 'VICOUS_LAYER_2')
smesh.SetName(EDGES_LONG_1_1, 'EDGES_LONG_1')


if salome.sg.hasDesktop():
  salome.sg.updateObjBrowser()
